# -*- coding: utf-8 -*-
# @time :2020/7/24 11:45
# @Author:老萝卜
# @file:递归函数-times_3
# @Software:%{PRODUICT_NAME}

# 尝试求10的阶乘 (10!)

# 1! = 1
# 2! = 1 * 2 = 2
# 3! = 1 * 2 * 3 = 6
# ......
print(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10)
# 3628800

n = 10
for i in range(1, 10):
    n *= i
print(n)


# 3628800

# 定义一个函数 来实现任意数的阶乘

def fn(n):
    # 参数n 用来求任意数的阶乘
    # 创建一个变量来保存结果
    r = n  # 将最后一个数直接赋值初始值,再乘n-1个数
    for i in range(1, n):
        r *= i
    return r


print(fn(10))


# 3628800

# 递归函数
# 从前有座山....

# 递归简单理解就是自己去引用自己
# 递归函数就是在函数中调用自己

# 无穷递归 类似于我们死循环
# def fn1():
#
#     fn1()
#
# fn1()

# 递归式解决问题的一种方式
# 整体思想是 将一个大问题分解为一个一个的小问题，直到问题无法分解时在去解决问题

# 递归函数的两个条件
# 1.基线条件 问题可以被分解为最小的问题，当满足基线条件时，递归就不在执行了
# 2.递归条件 将问题继续分解的条件


# 用递归的解决方案 来实现任意数的阶乘

# 10！ = 10 * 9！
# 9！ = 9 * 8！
# ...
# 1! = 1

def fn2(n):
    # 参数n 要求阶乘的数字
    # 基线条件：判断n为1的时候 就不递归了
    if n == 1:
        # 1的阶乘就是它本身 1
        return 1
    else:
        #递归条件:  n * (n-1)!
        return n * fn2(n - 1)

print(fn2(9))
# 362880